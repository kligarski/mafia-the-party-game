# Generated by Django 5.0.7 on 2024-09-16 09:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import mafia_app.models.game
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Discovery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Team'), (2, 'Team And Role')], default=2)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=mafia_app.models.game.generate_game_code, max_length=6)),
                ('has_started', models.BooleanField(default=False)),
                ('has_finished', models.BooleanField(default=False)),
                ('cycle', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('visible_username', models.CharField(max_length=64)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='End',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('game_result', models.IntegerField(choices=[(1, 'Continue'), (2, 'Mafia Wins'), (3, 'Village Wins')])),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='Lobby',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='RoleReveal',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Event Info'), (2, 'Moderator Info'), (3, 'Moderator Wait'), (4, 'Event Finished')], default=1)),
                ('order_of_players', models.JSONField()),
                ('current_player', models.IntegerField(default=-1)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.AddField(
            model_name='gamestate',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='mafia_app.game'),
        ),
        migrations.AddField(
            model_name='game',
            name='current_state',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.gamestate'),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, choices=[('moderator', 'Moderator'), ('villager', 'Villager'), ('mafia', 'Mafia'), ('protector', 'Protector'), ('seer', 'Seer')], max_length=16, null=True)),
                ('is_alive', models.BooleanField(default=True)),
                ('is_connected', models.BooleanField(default=False)),
                ('channel_name', models.CharField(blank=True, max_length=100, null=True)),
                ('view', models.JSONField(default=dict)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='mafia_app.game')),
                ('players_discovered', models.ManyToManyField(through='mafia_app.Discovery', to='mafia_app.player')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='moderator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.player'),
        ),
        migrations.AddField(
            model_name='discovery',
            name='from_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discoveries', to='mafia_app.player'),
        ),
        migrations.AddField(
            model_name='discovery',
            name='to_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dsicoveries', to='mafia_app.player'),
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('state_type', models.IntegerField(choices=[(1, 'Event Info'), (2, 'Night Outcome'), (3, 'Discussion'), (4, 'Vote'), (5, 'Event Finished')], default=1)),
                ('current_state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.gamestate')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='DayVote',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Event Info'), (2, 'Moderator Info'), (3, 'Moderator Wait'), (4, 'Moderator Result'), (5, 'Vote Result'), (6, 'Event Finished')], default=1)),
                ('order_of_players', models.JSONField()),
                ('current_player', models.IntegerField(default=-1)),
                ('votes', models.JSONField()),
                ('day_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.day')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Event Info'), (2, 'Discussion Ongoing'), (3, 'Discussion Finished'), (4, 'Event Finished')], default=1)),
                ('discussion_end_time', models.DateTimeField(blank=True, null=True)),
                ('day_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.day')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='Night',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('state_type', models.IntegerField(choices=[(1, 'Event Info'), (2, 'Mafia Vote'), (3, 'Protector Pick'), (4, 'Seer Pick'), (5, 'Event Finished')], default=1)),
                ('current_state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.gamestate')),
                ('mafia_pick', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.player')),
                ('protector_pick', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.player')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='MafiaVote',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Moderator Info'), (2, 'Vote'), (3, 'Moderator Result'), (4, 'Event Finished')], default=1)),
                ('votes', models.JSONField()),
                ('mafia_pick', models.JSONField()),
                ('mafia_confirm', models.JSONField()),
                ('no_mafiosi', models.IntegerField()),
                ('no_mafiosi_confirmed', models.IntegerField(default=0)),
                ('night_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.night')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.AddField(
            model_name='day',
            name='previous_night',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next_day', to='mafia_app.night'),
        ),
        migrations.CreateModel(
            name='NightOutcome',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('day_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.day')),
                ('night_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.night')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='ProtectorEvent',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Moderator Info'), (2, 'Pick'), (3, 'Moderator Result'), (4, 'Event Finished')], default=1)),
                ('night_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.night')),
                ('protector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.player')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
        migrations.CreateModel(
            name='SeerEvent',
            fields=[
                ('gamestate_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mafia_app.gamestate')),
                ('current_state', models.IntegerField(choices=[(1, 'Moderator Info'), (2, 'Pick'), (3, 'Result'), (4, 'Moderator End'), (5, 'Event Finished')], default=1)),
                ('night_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.night')),
                ('seer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='mafia_app.player')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mafia_app.gamestate',),
        ),
    ]
